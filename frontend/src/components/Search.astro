---
import Searchbar from "./Searchbar.astro";
import { slide } from "astro:transitions";

const query = decodeURIComponent(Astro.url.searchParams.get("q")) ? decodeURIComponent(Astro.url.searchParams.get("q")) : "" || null;

if (!query || query.trim() === "" || query == null) {
    return Astro.redirect("/");
}

const targetUrl =
	new URL(Astro.url.origin + "/api/search").href +
	"?q=" +
	encodeURIComponent(query);

const response = await fetch(targetUrl, {
	method: "GET",
	headers: {
		"Content-Type": "application/json",
	},
});

if (!response.ok) {
	throw new Error(
		`Error fetching search results: ${response.statusText} (${response.status})`
	);
}

const results = await response.json();
const time = results.time;
let thereAreResults = true;
if (!results.results) thereAreResults = false;
console.log("Results: ", results);
---

<>
	<div class="header">
		<a href="/" style="text-decoration: none; color: inherit;">
            <h1 class="mega-title" style="font-size: 3rem; margin: 0;">IndieSeas</h1>
        </a>
        <span style="margin: 5px;"></span>
        <Searchbar 
            transition:animate={slide({duration: "0.4s"})} 
            transition:name="searchbar" 
            transition:persist
            query={query}
        />
        <style>
            .header {
                display: flex;
                flex-direction: row;
                justify-content: start;
                align-items: center;
                width: 100%;
                padding: 5px;
            }
        </style>
	</div>
	<hr style="margin-top: 0;"/>
	<div id="results">
        <style>
            #results {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: start;
                padding: 5px;
            }
            .result {
                display: flex;
                flex-direction: column;
                justify-content: start;
                align-items: start;
                padding: 5px;
            }
            .result * {
                margin: 0;
                padding: 0;
            }
        </style>
        {thereAreResults ? (
            <>
                <p>Found {results.results.rowCount || 0} results for "{query}" in {time.toFixed(4)} miliseconds.</p>
                {
                    results.results.results.rows
                        .filter((result => result.similarity > 0.057))
                        .map((result) => (
                            <div class="result">
                                <a href={result.website} target="_blank">
                                    <h2>{result.title || result.website}</h2>
                                </a>
                                <p>{result.description || "No description provided."}</p>
                                <p style="font-size: 0.8rem; color: gray;">{result.website}</p>
                                <p style="font-size: 0.8rem; color: gray;">Similarity: {result.similarity?.toFixed(4) || "N/A"}</p>
                            </div>
                        ))
                }
            </>
        ) : (
            <p>No results found for "{query}" in {time} seconds.</p>
        )}
	</div>
</>
