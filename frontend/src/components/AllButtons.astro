---
import Button from "./Button.astro";

import Searchbar from "./Searchbar.astro";

const queryParam = Astro.url.searchParams.get("q");
const query = queryParam ? decodeURIComponent(queryParam) : "";
let results, pagination, buttonsList;

let pageSize: number;
const pageSizeParam = Astro.url.searchParams.get("pageSize");
const pageSizeCookie = Astro.cookies.get("page_size")?.value;

if (pageSizeParam) {
	pageSize = parseInt(pageSizeParam);
	// Update cookie if URL parameter is present
	Astro.cookies.set("page_size", pageSize.toString());
} else if (pageSizeCookie) {
	pageSize = parseInt(pageSizeCookie);
} else {
	pageSize = 200; // Default value
	Astro.cookies.set("page_size", "200"); // Set cookie to default
}

console.log("Page size:", pageSize);

if (query && query.trim() !== "") {
	const isColorFilter = Astro.url.searchParams.get("color") == "true";
	const colorParam = Astro.url.searchParams.get("q");
	const page = Astro.url.searchParams.get("page") || 1;
	const targetUrl = 
		new URL(Astro.url.origin + "/api/buttonSearch").href +
		"?q=" + encodeURIComponent(query) + 
		"&pageSize=" + (pageSize || Astro.url.searchParams.get("pageSize") || '10') +
		(isColorFilter ? `&color=${encodeURIComponent(colorParam)}&page=${page}` : "");
	
	const buttonSearchResponse = await fetch(targetUrl, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
		},
	});

	if (!buttonSearchResponse.ok) {
		throw new Error(
			`Error fetching search results: ${buttonSearchResponse.statusText} (${buttonSearchResponse.status})`
		);
	}

	results = await buttonSearchResponse.json();
	buttonsList = results.results.buttons || [];
	pagination = results.results.pagination || {
		currentPage: 1,
		totalPages: 1,
		totalButtons: buttonsList.length,
		hasPreviousPage: false,
		hasNextPage: false,
		previousPage: null,
		nextPage: null
	};
} else {
	const response = await fetch(
		new URL(
			Astro.url.origin +
				`/api/allButtons?page=${Astro.url.searchParams.get("page") || 1}&pageSize=${pageSize || Astro.url.searchParams.get("pageSize")}`
		).href,
		{
			method: "GET",
			headers: {
				"Content-Type": "application/json",
			},
		}
	);

	if (!response.ok) {
		throw new Error(
			`Error fetching buttons: ${response.statusText} (${response.status})`
		);
	}

	const buttons = await response.json();
	buttonsList = buttons.buttons || [];
	pagination = buttons.pagination;
}

const queryMessage = query
	? `Found ${buttonsList.length} buttons for "${query}"!`
	: `Displaying ${buttonsList.length} buttons out of ${pagination.totalButtons} total!`;
---

<div class="header">
	<a href="/" style="text-decoration: none; color: inherit;">
		<h1 class="mega-title" style="font-size: 3rem; margin: 0;">
			IndieSeas
		</h1>
	</a>
	<span style="margin: 5px;"></span>
	<Searchbar query={query} buttonSearch="true" />
	<style>
		.header {
			display: flex;
			flex-direction: row;
			justify-content: start;
			align-items: center;
			width: 100%;
			padding: 5px;
		}
	</style>
</div>
<hr style="margin-top: 0;" />
<div class="pagination-container">
	<span>
		<p>{queryMessage}</p>
	</span>

	<div class="pagination">
		{
			pagination.hasPreviousPage && (
				<a
					href={`?page=${pagination.previousPage}&q=${query}&color=${Astro.url.searchParams.get("color")}`}
					class="pagination-link"
				>
					Previous
				</a>
			)
		}

		<span class="page-info">
			Page {pagination.currentPage} of {pagination.totalPages}
			<span class="total-count">({pagination.totalButtons} total)</span>
		</span>

		{
			pagination.hasNextPage && (
				<a
				href={`?page=${pagination.nextPage}&q=${query}&color=${Astro.url.searchParams.get("color")}`}
					class="pagination-link"
				>
					Next
				</a>
			)
		}

		<div class="color-filter">
			<select id="color-select" class="color-select">
				<option value="">All colors</option>
				<option value="red">Red</option>
				<option value="blue">Blue</option>
				<option value="green">Green</option>
				<option value="yellow">Yellow</option>
				<option value="purple">Purple</option>
				<option value="orange">Orange</option>
				<option value="black">Black</option>
				<option value="gray">Gray</option>
				<option value="white">White</option>
				<option value="pink">Pink</option>
				<option value="brown">Brown</option>
			</select>
		</div>

		<div class="pagination-select">
			<select id="page-select" class="page-select" value={Astro.cookies.get("page_size")?.value || Astro.url.searchParams.get("pageSize") || 200}>
				<option value="10">10</option>
				<option value="50">50</option>
				<option value="100">100</option>
				<option value="200">200</option>
				<option value="500">500</option>
				<option value="1000">1000</option>
				<option value="15000">Deadly</option>
			</select>
		</div>

		<script defer>
			document.getElementById('color-select').value = new URL(window.location.href).searchParams.get('q') || '';
			document.getElementById('color-select').addEventListener('change', function() {
				const color = this.value;
				const currentUrl = new URL(window.location.href);
				const currentPage = currentUrl.searchParams.get('page') || '1';
				const existingQuery = currentUrl.searchParams.get('q');
				
				if (color == "") window.location.href = `/buttons?page=${currentPage}`;
				else if (existingQuery && existingQuery !== color) {
					window.location.href = `/buttons?color=true&q=${color}`;
				} else if (color) {
					window.location.href = `/buttons?color=true&q=${color}`;
				} else if (existingQuery) {
					window.location.href = `/buttons?q=${existingQuery}&page=${currentPage}`;
				}
			});

			document.getElementById('page-select').value = new URL(window.location.href).searchParams.get('pageSize') || '10';
			document.getElementById('page-select').addEventListener('change', function() {
				const pageSize = this.value;
				const currentUrl = new URL(window.location.href);
				const currentPage = currentUrl.searchParams.get('page') || '1';
				const existingQuery = currentUrl.searchParams.get('q');
				
				if (existingQuery) {
					document.cookie = `page_size=${pageSize}`;
					const currentUrl = new URL(window.location.href);
					currentUrl.searchParams.set('pageSize', pageSize);
					window.location.href = currentUrl.href;
				} else {
					window.location.href = `/buttons?page=${currentPage}&pageSize=${pageSize}`;
				}
			});
		</script>
	</div>
</div>

<style>
	.pagination-container {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.pagination {
		display: flex;
		gap: 1rem;
		align-items: center;
	}

	.pagination-link {
		padding: 0.25rem 0.5rem;
		border: 1px solid #ccc;
		border-radius: 4px;
		text-decoration: none;
	}

	.pagination-link:hover {
		background-color: #f0f0f0;
	}

	.total-count {
		font-size: 0.8rem;
		color: #666;
		margin-left: 0.5rem;
	}
</style>
<div class="button-container">
	{
		buttonsList.map((button: any) => (
			<Button
				src={button.src}
				image={"http://" + Astro.url.host + "/api/getButton?buttonId=" + button.id}
				links_to={button.links_to}
				alt={button.alt}
			/>
		))
	}
</div>
<p>Displaying {Astro.cookies.get("page_size")?.value} buttons per page</p>

<style>
	.button-container {
		padding: 1rem;
		position: relative;
	}
</style>
